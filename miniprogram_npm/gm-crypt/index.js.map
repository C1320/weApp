{"version":3,"sources":["index.js","src/sm4.js","src/crypt.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA,ACHA;ADIA,ACHA;ADIA,ACHA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["const SM4 = require('./src/sm4')\n\nmodule.exports = {\n  sm4: SM4\n}\n","\n\nconst Crypt = require('./crypt')\n\nconst UINT8_BLOCK = 16\n\nconst Sbox = Uint8Array.from([\n  0xd6, 0x90, 0xe9, 0xfe, 0xcc, 0xe1, 0x3d, 0xb7, 0x16, 0xb6, 0x14, 0xc2, 0x28, 0xfb, 0x2c, 0x05,\n  0x2b, 0x67, 0x9a, 0x76, 0x2a, 0xbe, 0x04, 0xc3, 0xaa, 0x44, 0x13, 0x26, 0x49, 0x86, 0x06, 0x99,\n  0x9c, 0x42, 0x50, 0xf4, 0x91, 0xef, 0x98, 0x7a, 0x33, 0x54, 0x0b, 0x43, 0xed, 0xcf, 0xac, 0x62,\n  0xe4, 0xb3, 0x1c, 0xa9, 0xc9, 0x08, 0xe8, 0x95, 0x80, 0xdf, 0x94, 0xfa, 0x75, 0x8f, 0x3f, 0xa6,\n  0x47, 0x07, 0xa7, 0xfc, 0xf3, 0x73, 0x17, 0xba, 0x83, 0x59, 0x3c, 0x19, 0xe6, 0x85, 0x4f, 0xa8,\n  0x68, 0x6b, 0x81, 0xb2, 0x71, 0x64, 0xda, 0x8b, 0xf8, 0xeb, 0x0f, 0x4b, 0x70, 0x56, 0x9d, 0x35,\n  0x1e, 0x24, 0x0e, 0x5e, 0x63, 0x58, 0xd1, 0xa2, 0x25, 0x22, 0x7c, 0x3b, 0x01, 0x21, 0x78, 0x87,\n  0xd4, 0x00, 0x46, 0x57, 0x9f, 0xd3, 0x27, 0x52, 0x4c, 0x36, 0x02, 0xe7, 0xa0, 0xc4, 0xc8, 0x9e,\n  0xea, 0xbf, 0x8a, 0xd2, 0x40, 0xc7, 0x38, 0xb5, 0xa3, 0xf7, 0xf2, 0xce, 0xf9, 0x61, 0x15, 0xa1,\n  0xe0, 0xae, 0x5d, 0xa4, 0x9b, 0x34, 0x1a, 0x55, 0xad, 0x93, 0x32, 0x30, 0xf5, 0x8c, 0xb1, 0xe3,\n  0x1d, 0xf6, 0xe2, 0x2e, 0x82, 0x66, 0xca, 0x60, 0xc0, 0x29, 0x23, 0xab, 0x0d, 0x53, 0x4e, 0x6f,\n  0xd5, 0xdb, 0x37, 0x45, 0xde, 0xfd, 0x8e, 0x2f, 0x03, 0xff, 0x6a, 0x72, 0x6d, 0x6c, 0x5b, 0x51,\n  0x8d, 0x1b, 0xaf, 0x92, 0xbb, 0xdd, 0xbc, 0x7f, 0x11, 0xd9, 0x5c, 0x41, 0x1f, 0x10, 0x5a, 0xd8,\n  0x0a, 0xc1, 0x31, 0x88, 0xa5, 0xcd, 0x7b, 0xbd, 0x2d, 0x74, 0xd0, 0x12, 0xb8, 0xe5, 0xb4, 0xb0,\n  0x89, 0x69, 0x97, 0x4a, 0x0c, 0x96, 0x77, 0x7e, 0x65, 0xb9, 0xf1, 0x09, 0xc5, 0x6e, 0xc6, 0x84,\n  0x18, 0xf0, 0x7d, 0xec, 0x3a, 0xdc, 0x4d, 0x20, 0x79, 0xee, 0x5f, 0x3e, 0xd7, 0xcb, 0x39, 0x48\n])\n\nconst CK = Uint32Array.from([\n  0x00070e15, 0x1c232a31, 0x383f464d, 0x545b6269,\n  0x70777e85, 0x8c939aa1, 0xa8afb6bd, 0xc4cbd2d9,\n  0xe0e7eef5, 0xfc030a11, 0x181f262d, 0x343b4249,\n  0x50575e65, 0x6c737a81, 0x888f969d, 0xa4abb2b9,\n  0xc0c7ced5, 0xdce3eaf1, 0xf8ff060d, 0x141b2229,\n  0x30373e45, 0x4c535a61, 0x686f767d, 0x848b9299,\n  0xa0a7aeb5, 0xbcc3cad1, 0xd8dfe6ed, 0xf4fb0209,\n  0x10171e25, 0x2c333a41, 0x484f565d, 0x646b7279\n])\n\nconst FK = Uint32Array.from([\n  0xa3b1bac6, 0x56aa3350, 0x677d9197, 0xb27022dc\n])\n\nclass SM4 {\n  /**\n   * Creates an instance of SM4.\n   * @param {Object} config\n   * @memberof SM4\n   */\n  constructor (config) {\n    let keyBuffer = Crypt.stringToArrayBufferInUtf8(config.key)\n    if (keyBuffer.length !== 16) {\n      throw new Error('key should be a 16 bytes string')\n    }\n    /**\n     * key should be 16 bytes string\n     * @member {Uint8Array} key\n     */\n    this.key = keyBuffer\n    /**\n     * iv also should be 16 bytes string\n     * @member {Uint8Array} iv\n     */\n    let ivBuffer = new Uint8Array(0)\n    if (config.iv !== undefined && config.iv !== null) {\n      // need iv\n      ivBuffer = Crypt.stringToArrayBufferInUtf8(config.iv)\n      if (ivBuffer.length !== 16) {\n        throw new Error('iv should be a 16 bytes string')\n      }\n    }\n    this.iv = ivBuffer\n    /**\n     * sm4's encrypt mode\n     * @member {Enum} mode\n     */\n    this.mode = 'cbc'\n    if (['cbc', 'ecb'].indexOf(config.mode) >= 0) {\n      // set encrypt mode. default is cbc\n      this.mode = config.mode\n    }\n    /**\n     * sm4's cipher data type\n     * @member {Enum} outType\n     */\n    this.cipherType = 'base64'\n    if (['base64', 'text'].indexOf(config.outType) >= 0) {\n      // set encrypt mode. default is cbc\n      this.cipherType = config.outType\n    }\n    /**\n     * sm4's encrypt round key array\n     * @member {Uint32Array} encryptRoundKeys\n     */\n    this.encryptRoundKeys = new Uint32Array(32)\n    // spawn 32 round keys\n    this.spawnEncryptRoundKeys()\n\n    /**\n     * sm4's decrypt round key array\n     * @member {Uint32Array} encryptRoundKeys\n     */\n    this.decryptRoundKeys = Uint32Array.from(this.encryptRoundKeys)\n    this.decryptRoundKeys.reverse()\n  }\n\n  /**\n   * general sm4 encrypt/decrypt algorithm for a 16 bytes block using roundKey\n   *\n   * @param {Uint32Array} blockData\n   * @param {Uint32Array} roundKeys\n   * @return {Uint32Array} return a 16 bytes cipher block\n   * @memberof SM4\n   */\n  doBlockCrypt (blockData, roundKeys) {\n    let xBlock = new Uint32Array(36)\n    xBlock.set(blockData, 0)\n    // loop to process 32 rounds crypt\n    for (let i = 0; i < 32; i++) {\n      xBlock[i + 4] = xBlock[i] ^ this.tTransform1(xBlock[i + 1] ^ xBlock[i + 2] ^ xBlock[i + 3] ^ roundKeys[i])\n    }\n    let yBlock = new Uint32Array(4)\n    // reverse last 4 xBlock member\n    yBlock[0] = xBlock[35]\n    yBlock[1] = xBlock[34]\n    yBlock[2] = xBlock[33]\n    yBlock[3] = xBlock[32]\n    return yBlock\n  }\n\n  /**\n   * spawn round key array for encrypt. reverse this key array when decrypt.\n   * every round key's length is 32 bytes.\n   * there are 32 round keys.\n   * @return {Uint32Array}\n   * @memberof SM4\n   */\n  spawnEncryptRoundKeys () {\n    // extract mk in key\n    let mk = new Uint32Array(4)\n    mk[0] = this.key[0] << 24 | this.key[1] << 16 | this.key[2] << 8 | this.key[3]\n    mk[1] = this.key[4] << 24 | this.key[5] << 16 | this.key[6] << 8 | this.key[7]\n    mk[2] = this.key[8] << 24 | this.key[9] << 16 | this.key[10] << 8 | this.key[11]\n    mk[3] = this.key[12] << 24 | this.key[13] << 16 | this.key[14] << 8 | this.key[15]\n    // calculate the K array\n    let k = new Uint32Array(36)\n    k[0] = mk[0] ^ FK[0]\n    k[1] = mk[1] ^ FK[1]\n    k[2] = mk[2] ^ FK[2]\n    k[3] = mk[3] ^ FK[3]\n    // loop to spawn 32 round keys\n    for (let i = 0; i < 32; i++) {\n      k[i + 4] = k[i] ^ this.tTransform2(k[i + 1] ^ k[i + 2] ^ k[i + 3] ^ CK[i])\n      this.encryptRoundKeys[i] = k[i + 4]\n    }\n  }\n\n  /**\n   * left rotate x by y bits\n   *\n   * @param {*} x\n   * @param {Number} y\n   * @returns\n   * @memberof SM4\n   */\n  rotateLeft (x, y) {\n    return x << y | x >>> (32 - y)\n  }\n\n  /**\n   * L transform function for encrypt\n   *\n   * @param {Uint32Number} b\n   * @returns {Uint32Number}\n   * @memberof SM4\n   */\n  linearTransform1 (b) {\n    return b ^ this.rotateLeft(b, 2) ^ this.rotateLeft(b, 10) ^ this.rotateLeft(b, 18) ^ this.rotateLeft(b, 24)\n  }\n\n  /**\n   * L' transform function for key expand\n   *\n   * @param {Uint32Number} b\n   * @returns {Uint32Number}\n   * @memberof SM4\n   */\n  linearTransform2 (b) {\n    return b ^ this.rotateLeft(b, 13) ^ this.rotateLeft(b, 23)\n  }\n\n  /**\n   * Ï„ transform function\n   *\n   * @param {Uint32Number} a\n   * @returns {Uint32Number}\n   * @memberof SM4\n   */\n  tauTransform (a) {\n    return Sbox[a >>> 24 & 0xff] << 24 | Sbox[a >>> 16 & 0xff] << 16 | Sbox[a >>> 8 & 0xff] << 8 | Sbox[a & 0xff]\n  }\n\n  /**\n   * mix replacement T transform for encrypt\n   *\n   * @param {Uint32Number} z\n   * @returns {Uint32Number}\n   * @memberof SM4\n   */\n  tTransform1 (z) {\n    let b = this.tauTransform(z)\n    let c = this.linearTransform1(b)\n    return c\n  }\n\n  /**\n   * mix replacement T transform for key expand\n   *\n   * @param {Uint32Number} z\n   * @returns {Uint32Number}\n   * @memberof SM4\n   */\n  tTransform2 (z) {\n    let b = this.tauTransform(z)\n    let c = this.linearTransform2(b)\n    return c\n  }\n\n  /**\n   * padding the array length to multiple of BLOCK\n   *\n   * @param {ByteArray} originalBuffer\n   * @returns {ByteArray}\n   * @memberof SM4\n   */\n  padding (originalBuffer) {\n    if (originalBuffer === null) {\n      return null\n    }\n    let paddingLength = UINT8_BLOCK - originalBuffer.length % UINT8_BLOCK\n    let paddedBuffer = new Uint8Array(originalBuffer.length + paddingLength)\n    paddedBuffer.set(originalBuffer, 0)\n    paddedBuffer.fill(paddingLength, originalBuffer.length)\n    return paddedBuffer\n  }\n\n  /**\n   * depadding the byte array to its original length\n   *\n   * @param {ByteArray} paddedBuffer\n   * @returns {ByteArray}\n   * @memberof SM4\n   */\n  dePadding (paddedBuffer) {\n    if (paddedBuffer === null) {\n      return null\n    }\n    let paddingLength = paddedBuffer[paddedBuffer.length - 1]\n    let originalBuffer = paddedBuffer.slice(0, paddedBuffer.length - paddingLength)\n    return originalBuffer\n  }\n\n  /**\n   * exctract uint32 array block from uint8 array\n   *\n   * @param {Uint8Array} uint8Array\n   * @param {Number} baseIndex\n   * @returns {Uint32Array}\n   * @memberof SM4\n   */\n  uint8ToUint32Block (uint8Array, baseIndex = 0) {\n    let block = new Uint32Array(4)// make Uint8Array to Uint32Array block\n    block[0] = uint8Array[baseIndex] << 24 | uint8Array[baseIndex + 1] << 16 | uint8Array[baseIndex + 2] << 8 | uint8Array[baseIndex + 3]\n    block[1] = uint8Array[baseIndex + 4] << 24 | uint8Array[baseIndex + 5] << 16 | uint8Array[baseIndex + 6] << 8 | uint8Array[baseIndex + 7]\n    block[2] = uint8Array[baseIndex + 8] << 24 | uint8Array[baseIndex + 9] << 16 | uint8Array[baseIndex + 10] << 8 | uint8Array[baseIndex + 11]\n    block[3] = uint8Array[baseIndex + 12] << 24 | uint8Array[baseIndex + 13] << 16 | uint8Array[baseIndex + 14] << 8 | uint8Array[baseIndex + 15]\n    return block\n  }\n\n  /**\n   * encrypt the string plaintext\n   *\n   * @param {String} plaintext\n   * @memberof SM4\n   * @return {String} ciphertext\n   */\n  encrypt (plaintext) {\n    let plainByteArray = Crypt.stringToArrayBufferInUtf8(plaintext)\n    let padded = this.padding(plainByteArray)\n    let blockTimes = padded.length / UINT8_BLOCK\n    let outArray = new Uint8Array(padded.length)\n    if (this.mode === 'cbc') {\n      // CBC mode\n      if (this.iv === null || this.iv.length !== 16) {\n        throw new Error('iv error')\n      }\n      // init chain with iv (transform to uint32 block)\n      let chainBlock = this.uint8ToUint32Block(this.iv)\n      for (let i = 0; i < blockTimes; i++) {\n        // extract the 16 bytes block data for this round to encrypt\n        let roundIndex = i * UINT8_BLOCK\n        let block = this.uint8ToUint32Block(padded, roundIndex)\n        // xor the chain block\n        chainBlock[0] = chainBlock[0] ^ block[0]\n        chainBlock[1] = chainBlock[1] ^ block[1]\n        chainBlock[2] = chainBlock[2] ^ block[2]\n        chainBlock[3] = chainBlock[3] ^ block[3]\n        // use chain block to crypt\n        let cipherBlock = this.doBlockCrypt(chainBlock, this.encryptRoundKeys)\n        // make the cipher block be part of next chain block\n        chainBlock = cipherBlock\n        for (let l = 0; l < UINT8_BLOCK; l++) {\n          outArray[roundIndex + l] = cipherBlock[parseInt(l / 4)] >> ((3 - l) % 4 * 8) & 0xff\n        }\n      }\n    } else {\n      // this will be ECB mode\n      for (let i = 0; i < blockTimes; i++) {\n        // extract the 16 bytes block data for this round to encrypt\n        let roundIndex = i * UINT8_BLOCK\n        let block = this.uint8ToUint32Block(padded, roundIndex)\n        let cipherBlock = this.doBlockCrypt(block, this.encryptRoundKeys)\n        for (let l = 0; l < UINT8_BLOCK; l++) {\n          outArray[roundIndex + l] = cipherBlock[parseInt(l / 4)] >> ((3 - l) % 4 * 8) & 0xff\n        }\n      }\n    }\n\n    // cipher array to string\n    if (this.cipherType === 'base64') {\n      return Crypt.arrayBufferToBase64(outArray)\n    } else {\n      // text\n      return Crypt.utf8ArrayBufferToString(outArray)\n    }\n  }\n\n  /**\n   * decrypt the string ciphertext\n   *\n   * @param {String} ciphertext\n   * @memberof SM4\n   */\n  decrypt (ciphertext) {\n    // get cipher byte array\n    let cipherByteArray = new Uint8Array()\n    if (this.cipherType === 'base64') {\n      // cipher is base64 string\n      cipherByteArray = Crypt.base64ToArrayBuffer(ciphertext)\n    } else {\n      // cipher is text\n      cipherByteArray = Crypt.stringToArrayBufferInUtf8(ciphertext)\n    }\n    let blockTimes = cipherByteArray.length / UINT8_BLOCK\n    let outArray = new Uint8Array(cipherByteArray.length)\n    // decrypt the ciphertext by block\n    if (this.mode === 'cbc') {\n      // todo CBC mode\n      if (this.iv === null || this.iv.length !== 16) {\n        throw new Error('iv error')\n      }\n      // init chain with iv (transform to uint32 block)\n      let chainBlock = this.uint8ToUint32Block(this.iv)\n      for (let i = 0; i < blockTimes; i++) {\n        // extract the 16 bytes block data for this round to encrypt\n        let roundIndex = i * UINT8_BLOCK\n        // make Uint8Array to Uint32Array block\n        let block = this.uint8ToUint32Block(cipherByteArray, roundIndex)\n        // reverse the round keys to decrypt\n        let plainBlockBeforeXor = this.doBlockCrypt(block, this.decryptRoundKeys)\n        // xor the chain block\n        let plainBlock = new Uint32Array(4)\n        plainBlock[0] = chainBlock[0] ^ plainBlockBeforeXor[0]\n        plainBlock[1] = chainBlock[1] ^ plainBlockBeforeXor[1]\n        plainBlock[2] = chainBlock[2] ^ plainBlockBeforeXor[2]\n        plainBlock[3] = chainBlock[3] ^ plainBlockBeforeXor[3]\n        // make the cipher block be part of next chain block\n        chainBlock = block\n        for (let l = 0; l < UINT8_BLOCK; l++) {\n          outArray[roundIndex + l] = plainBlock[parseInt(l / 4)] >> ((3 - l) % 4 * 8) & 0xff\n        }\n      }\n    } else {\n      // ECB mode\n      for (let i = 0; i < blockTimes; i++) {\n        // extract the 16 bytes block data for this round to encrypt\n        let roundIndex = i * UINT8_BLOCK\n        // make Uint8Array to Uint32Array block\n        let block = this.uint8ToUint32Block(cipherByteArray, roundIndex)\n        // reverse the round keys to decrypt\n        let plainBlock = this.doBlockCrypt(block, this.decryptRoundKeys)\n        for (let l = 0; l < UINT8_BLOCK; l++) {\n          outArray[roundIndex + l] = plainBlock[parseInt(l / 4)] >> ((3 - l) % 4 * 8) & 0xff\n        }\n      }\n    }\n    // depadding the decrypted data\n    let depaddedPlaintext = this.dePadding(outArray)\n    // transform data to utf8 string\n    return Crypt.utf8ArrayBufferToString(depaddedPlaintext)\n  }\n}\n\nmodule.exports = SM4\n","\n\nconst base64js = require('base64-js')\n\nclass Crypt {\n  /**\n   * Converts a JS string to an UTF-8 uint8array.\n   *\n   * @static\n   * @param {String} str 16-bit unicode string.\n   * @return {Uint8Array} UTF-8 Uint8Array.\n   * @memberof Crypt\n   */\n  static stringToArrayBufferInUtf8 (str) {\n    // if not browser env, then require node.js's util. otherwise just use window's\n    const TextEncoder = (typeof window === 'undefined') ? require('util').TextEncoder : window.TextEncoder\n    // always utf-8\n    let encoder = new TextEncoder()\n    return encoder.encode(str)\n  }\n\n  /**\n   * Converts an UTF-8 uint8array to a JS string.\n   *\n   * @static\n   * @param {Uint8Array} strBuffer UTF-8 Uint8Array.\n   * @return {String} 16-bit unicode string.\n   * @memberof Crypt\n   */\n  static utf8ArrayBufferToString (strBuffer) {\n    // if not browser env, then require node.js's util. otherwise just use window's\n    const TextDecoder = (typeof window === 'undefined') ? require('util').TextDecoder : window.TextDecoder\n    let decoder = new TextDecoder('utf-8')\n    return decoder.decode(strBuffer)\n  }\n\n  /**\n   * crypt a utf8 byteArray to base64 string\n   *\n   * @static\n   * @param {Uint8Array} strBuffer UTF-8 Uint8Array.\n   * @returns {String} base64 str\n   * @memberof Crypt\n   */\n  static arrayBufferToBase64 (strBuffer) {\n    return base64js.fromByteArray(strBuffer)\n  }\n\n  /**\n   * crypt base64 stringa to utf8 byteArray\n   *\n   * @static\n   * @param {String} base64 str\n   * @returns {Uint8Array} strBuffer UTF-8 Uint8Array.\n   * @memberof Crypt\n   */\n  static base64ToArrayBuffer (base64) {\n    return base64js.toByteArray(base64)\n  }\n}\n\nmodule.exports = Crypt\n"]}